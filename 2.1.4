
Title

2.1.4 Webmail messages are sent and received unencrypted (non-HTTPS)
Priority

High
Summary

An attacker with access to the same local network as a staff member, when that staff member sends or receives email using the organization’s Webmail service, can easily and invisibly read, record or modify all messages in-transit to and from the Webmail server. This attacker could be someone, such as a patron of the Internet cafe where a staff member is working, who just happens to be using the same local network to connect to the Internet. Or, she could work for an organization with privileged access to the relevant network, such as SampleOrg’s Internet Service Provider (ISP) or a state surveillance agency.

Even an informed staff member, who attempts to enter the secure (“https://”;) alternative webmail address when logging in, will be unable to do so, because the Webmail application does not support it.
Description
<description>
MitigationTitle

Mandatory (SSL, TLS or HTTPS) encryption on all authenticated services (especially email)
MitigationDescription

For Webmail, this means installing a valid, signed SSL certificate and disabling access through the insecure (“http://”) Web address. Attempts to access the insecure address should be redirected to the secure (“https://”;) URL.
Assets affected by this issue

    2.1 Email assessment (1 instance)

Evidence for 2.1 Email assessment
Title

2.1.4 [sample evidence] Webmail messages are sent and received unencrypted (non-HTTPS)
Summary

If the attacker wishes to observe the victim’s email traffic (most likely because she failed to capture an unencrypted password, which would have allowed her to log in as the victim himself and read his email directly), she may need to carry out a second, slightly more complex attack.
Description

To capture outgoing Webmail messages, the attack is nearly identical to the password attack described above.

Step 1: The attacker tricks the victim into routing all of his traffic through the attacker’s machine. This involves making a simple request to the victim’s IP address, which is not difficult to do. Computers are rarely configured to ignore such requests.

$ sudo sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
$ sudo arpspoof -i wlan0 -t 192.168.1.99 192.168.1.1

00:11:22:33:44:55 aa:bb:cc:dd:ee:ff 0806 42: arp reply 192.168.1.1 is-at 00:11:22:33:44:55
00:11:22:33:44:55 aa:bb:cc:dd:ee:ff 0806 42: arp reply 192.168.1.1 is-at 00:11:22:33:44:55
00:11:22:33:44:55 aa:bb:cc:dd:ee:ff 0806 42: arp reply 192.168.1.1 is-at 00:11:22:33:44:55
00:11:22:33:44:55 aa:bb:cc:dd:ee:ff 0806 42: arp reply 192.168.1.1 is-at 00:11:22:33:44:55
...
00:11:22:33:44:55 aa:bb:cc:dd:ee:ff 0806 42: arp reply 192.168.1.1 is-at 00:11:22:33:44:55

In the example above, only a single victim (192.168.1.99) is being targeted, but the attack works fine against multiple victims, or even against the entire network. In other words, the attacker does not need to know which IP address (on the office or Internet cafe LAN, for example) belongs to her target. Furthermore, the victim is extremely unlikely to notice any sign that this phase of the attack is taking place.

Step 2: At this point, if the attacker is looking for outgoing Webmail, all she needs to do is launch a packet-sniffer, such as Wireshark, and scan through the Web traffic for email messages, which will appear as soon as they are sent:

<wireshark screenshot>

Figure 1: Wireshark displaying a Webmail message sent by the victim

Step 3: In order to monitor incoming Webmail messages, the attacker must use some technique to ensure that responses to the victim actually pass through the attacker’s machine before they arrive. The second option does a better job of preventing others on the network from noticing that something unusual is happening. The most straightforward tool for this sort of thing, SSLStrip, was written to facilitate more advanced testing of Web services that do implement encryption, but that do so incorrectly. In any case, it works fine for our purposes as well.

$ sslstrip -a -l 12345 -w sslstrip.log

Step 4: After the arpspoof step above, the attacker uses iptables to route a portion of the victim’s traffic (in this case, Web traffic destined for port 80) through the SSLStrip tool, which rewrites headers such that responses come to her first, before continuing along to the victim. She then monitors the tool’s output for incoming Webmail messages:

$ iptables -t nat -A PREROUTING -p tcp --destination-port 80 –j REDIRECT --to-port 12345
$ tail -f sslstrip.log

At this point, the contents of the sslstrip.log file contains a copy of incoming Web traffic, including any Webmail messages the victim might read.

<message snippet from sslstrip.log>

Figure 2: Attacker viewing an incoming email message intended for the victim

Again, this same technique, with minor modifications, would work to monitor incoming email messages downloaded through POP3 or IMAP by Microsoft Outlook or some other email client.
